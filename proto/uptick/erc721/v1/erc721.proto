syntax = "proto3";
package uptick.erc721.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/UptickNetwork/uptick/x/erc721/types";

// Owner enumerates the ownership of a ERC721 contract.
enum Owner {
  option (gogoproto.goproto_enum_prefix) = false;
  // OWNER_UNSPECIFIED defines an invalid/undefined owner.
  OWNER_UNSPECIFIED = 0;
  // OWNER_MODULE erc721 is owned by the erc721 module account.
  OWNER_MODULE = 1;
  // EXTERNAL erc721 is owned by an external account.
  OWNER_EXTERNAL = 2;
}

// TokenPair defines an instance that records a pairing consisting of a native
// Cosmos Coin and an ERC721 token address.
message TokenPair {
  option (gogoproto.equal) = true;
  // address of ERC721 contract token
  string erc721_address = 1;
  // cosmos nft class ID to be mapped to
  string class_id = 2;

}

// defines the unique id of nft asset
message UIDPair {
  option (gogoproto.equal) = true;
  // address of ERC721 contract token + tokenId
  string erc721_did = 1;
  // cosmos nft class ID to be mapped to + nftId
  string class_did = 2;
}
