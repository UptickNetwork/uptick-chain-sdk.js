syntax = "proto3";
package uptick.erc721.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "ibc/core/client/v1/client.proto";

option go_package = "github.com/UptickNetwork/uptick/x/erc721/types";

// Msg defines the erc721 Msg service.
service Msg {
  // ConvertNFT mints a ERC721 representation of the native Cosmos nft
  // that is registered on the token mapping.
  rpc ConvertNFT(MsgConvertNFT) returns (MsgConvertNFTResponse) {
    option (google.api.http).get = "/uptick/erc721/v1/tx/convert_nft";
  };
  // ConvertERC721 mints a native Cosmos coin representation of the ERC721 token
  // contract that is registered on the token mapping.
  rpc ConvertERC721(MsgConvertERC721) returns (MsgConvertERC721Response) {
    option (google.api.http).get = "/uptick/erc721/v1/tx/convert_erc721";
  };

  rpc TransferERC721(MsgTransferERC721) returns (MsgTransferERC721Response) {
    option (google.api.http).get = "/uptick/erc721/v1/tx/ibc-transfer-erc721";
  };
}

// MsgConvertNFT defines a Msg to convert a native Cosmos nft to a ERC721 token
message MsgConvertNFT {
  // nft classID to cnvert to ERC721
  string class_id = 1;
  // nftID to cnvert to ERC721
  repeated string cosmos_token_ids = 2;
  // recipient hex address to receive ERC721 token
  string evm_receiver = 3;
  // cosmos bech32 address from the owner of the given Cosmos coins
  string cosmos_sender = 4;
  // ERC721 token contract address registered in a token pair
  string evm_contract_address = 5;
  // ERC721 token id registered in a token pair
  repeated string evm_token_ids = 6;
}

// MsgConvertNFTResponse returns no fields
message MsgConvertNFTResponse {}

// MsgConvertERC721 defines a Msg to convert a ERC721 token to a native Cosmos
// nft.
message MsgConvertERC721 {
  // ERC721 token contract address registered in a token pair
  string evm_contract_address = 1;
  // tokenID to convert
  repeated string evm_token_ids = 2;
  // bech32 address to receive native Cosmos coins
  string cosmos_receiver = 3;
  // sender hex address from the owner of the given ERC721 tokens
  string evm_sender = 4;
  // nft classID to cnvert to ERC721
  string class_id = 5;
  // nftID to cnvert to ERC721
  repeated string cosmos_token_ids = 6;
}

// MsgConvertERC721Response returns no fields
message MsgConvertERC721Response {}

message MsgTransferERC721 {

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string evm_contract_address = 1;
  // tokenID to convert
  repeated string evm_token_ids = 2;

  // the port on which the packet will be sent
  string source_port = 3;
  // the channel by which the packet will be sent
  string source_channel = 4;
  // the class_id of tokens to be transferred
  string class_id = 5;
  // the non fungible tokens to be transferred
  repeated string cosmos_token_ids = 6;
  // the sender address
  string evm_sender = 7;
  // the recipient address on the destination chain
  string cosmos_receiver = 8;
  // Timeout height relative to the current block height.
  // The timeout is disabled when set to 0.
  ibc.core.client.v1.Height timeout_height = 9 [
    (gogoproto.nullable) = false
  ];
  // Timeout timestamp in absolute nanoseconds since unix epoch.
  // The timeout is disabled when set to 0.
  uint64 timeout_timestamp = 10;
  // optional memo
  string memo = 11;

}

message MsgTransferERC721Response {}

