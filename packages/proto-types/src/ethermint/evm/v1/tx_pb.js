// source: ethermint/evm/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var cosmos_proto_cosmos_pb = require('../../../cosmos_proto/cosmos_pb.js');
goog.object.extend(proto, cosmos_proto_cosmos_pb);
var ethermint_evm_v1_evm_pb = require('../../../ethermint/evm/v1/evm_pb.js');
goog.object.extend(proto, ethermint_evm_v1_evm_pb);
goog.exportSymbol('proto.ethermint.evm.v1.AccessListTx', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.DynamicFeeTx', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.ExtensionOptionsEthereumTx', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.LegacyTx', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.MsgEthereumTx', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.MsgEthereumTxResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.MsgEthereumTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethermint.evm.v1.MsgEthereumTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.MsgEthereumTx.displayName = 'proto.ethermint.evm.v1.MsgEthereumTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.LegacyTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethermint.evm.v1.LegacyTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.LegacyTx.displayName = 'proto.ethermint.evm.v1.LegacyTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.AccessListTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethermint.evm.v1.AccessListTx.repeatedFields_, null);
};
goog.inherits(proto.ethermint.evm.v1.AccessListTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.AccessListTx.displayName = 'proto.ethermint.evm.v1.AccessListTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.DynamicFeeTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethermint.evm.v1.DynamicFeeTx.repeatedFields_, null);
};
goog.inherits(proto.ethermint.evm.v1.DynamicFeeTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.DynamicFeeTx.displayName = 'proto.ethermint.evm.v1.DynamicFeeTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.ExtensionOptionsEthereumTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethermint.evm.v1.ExtensionOptionsEthereumTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.displayName = 'proto.ethermint.evm.v1.ExtensionOptionsEthereumTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethermint.evm.v1.MsgEthereumTxResponse.repeatedFields_, null);
};
goog.inherits(proto.ethermint.evm.v1.MsgEthereumTxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.MsgEthereumTxResponse.displayName = 'proto.ethermint.evm.v1.MsgEthereumTxResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.MsgEthereumTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.MsgEthereumTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.MsgEthereumTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    size: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    from: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.MsgEthereumTx}
 */
proto.ethermint.evm.v1.MsgEthereumTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.MsgEthereumTx;
  return proto.ethermint.evm.v1.MsgEthereumTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.MsgEthereumTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.MsgEthereumTx}
 */
proto.ethermint.evm.v1.MsgEthereumTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.MsgEthereumTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.MsgEthereumTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.MsgEthereumTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getSize();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Any data = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTx} returns this
*/
proto.ethermint.evm.v1.MsgEthereumTx.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethermint.evm.v1.MsgEthereumTx} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double size = 2;
 * @return {number}
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTx} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.setSize = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTx} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string from = 4;
 * @return {string}
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTx} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTx.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.LegacyTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.LegacyTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.LegacyTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gas: jspb.Message.getFieldWithDefault(msg, 3, 0),
    to: jspb.Message.getFieldWithDefault(msg, 4, ""),
    value: jspb.Message.getFieldWithDefault(msg, 5, ""),
    data: msg.getData_asB64(),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.LegacyTx}
 */
proto.ethermint.evm.v1.LegacyTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.LegacyTx;
  return proto.ethermint.evm.v1.LegacyTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.LegacyTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.LegacyTx}
 */
proto.ethermint.evm.v1.LegacyTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.LegacyTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.LegacyTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.LegacyTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGasPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string gas_price = 2;
 * @return {string}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getGasPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 gas = 3;
 * @return {number}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string to = 4;
 * @return {string}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string value = 5;
 * @return {string}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes v = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes v = 7;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes r = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes r = 8;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes s = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes s = 9;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.LegacyTx.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.LegacyTx} returns this
 */
proto.ethermint.evm.v1.LegacyTx.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethermint.evm.v1.AccessListTx.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.AccessListTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.AccessListTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.AccessListTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gas: jspb.Message.getFieldWithDefault(msg, 4, 0),
    to: jspb.Message.getFieldWithDefault(msg, 5, ""),
    value: jspb.Message.getFieldWithDefault(msg, 6, ""),
    data: msg.getData_asB64(),
    accessesList: jspb.Message.toObjectList(msg.getAccessesList(),
    ethermint_evm_v1_evm_pb.AccessTuple.toObject, includeInstance),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.AccessListTx}
 */
proto.ethermint.evm.v1.AccessListTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.AccessListTx;
  return proto.ethermint.evm.v1.AccessListTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.AccessListTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.AccessListTx}
 */
proto.ethermint.evm.v1.AccessListTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 8:
      var value = new ethermint_evm_v1_evm_pb.AccessTuple;
      reader.readMessage(value,ethermint_evm_v1_evm_pb.AccessTuple.deserializeBinaryFromReader);
      msg.addAccesses(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.AccessListTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.AccessListTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.AccessListTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGasPrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getAccessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      ethermint_evm_v1_evm_pb.AccessTuple.serializeBinaryToWriter
    );
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string gas_price = 3;
 * @return {string}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getGasPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 gas = 4;
 * @return {number}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string to = 5;
 * @return {string}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string value = 6;
 * @return {string}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes data = 7;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * repeated AccessTuple accesses = 8;
 * @return {!Array<!proto.ethermint.evm.v1.AccessTuple>}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getAccessesList = function() {
  return /** @type{!Array<!proto.ethermint.evm.v1.AccessTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, ethermint_evm_v1_evm_pb.AccessTuple, 8));
};


/**
 * @param {!Array<!proto.ethermint.evm.v1.AccessTuple>} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
*/
proto.ethermint.evm.v1.AccessListTx.prototype.setAccessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ethermint.evm.v1.AccessTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ethermint.evm.v1.AccessTuple}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.addAccesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ethermint.evm.v1.AccessTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.clearAccessesList = function() {
  return this.setAccessesList([]);
};


/**
 * optional bytes v = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes v = 9;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes r = 10;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes r = 10;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes s = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes s = 11;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.AccessListTx.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.AccessListTx} returns this
 */
proto.ethermint.evm.v1.AccessListTx.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethermint.evm.v1.DynamicFeeTx.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.DynamicFeeTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.DynamicFeeTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.DynamicFeeTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasTipCap: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gasFeeCap: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gas: jspb.Message.getFieldWithDefault(msg, 5, 0),
    to: jspb.Message.getFieldWithDefault(msg, 6, ""),
    value: jspb.Message.getFieldWithDefault(msg, 7, ""),
    data: msg.getData_asB64(),
    accessesList: jspb.Message.toObjectList(msg.getAccessesList(),
    ethermint_evm_v1_evm_pb.AccessTuple.toObject, includeInstance),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx}
 */
proto.ethermint.evm.v1.DynamicFeeTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.DynamicFeeTx;
  return proto.ethermint.evm.v1.DynamicFeeTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.DynamicFeeTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx}
 */
proto.ethermint.evm.v1.DynamicFeeTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasTipCap(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasFeeCap(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 9:
      var value = new ethermint_evm_v1_evm_pb.AccessTuple;
      reader.readMessage(value,ethermint_evm_v1_evm_pb.AccessTuple.deserializeBinaryFromReader);
      msg.addAccesses(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.DynamicFeeTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.DynamicFeeTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.DynamicFeeTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGasTipCap();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGasFeeCap();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getAccessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      ethermint_evm_v1_evm_pb.AccessTuple.serializeBinaryToWriter
    );
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string gas_tip_cap = 3;
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getGasTipCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setGasTipCap = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gas_fee_cap = 4;
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getGasFeeCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setGasFeeCap = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 gas = 5;
 * @return {number}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string to = 6;
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string value = 7;
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes data = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes data = 8;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * repeated AccessTuple accesses = 9;
 * @return {!Array<!proto.ethermint.evm.v1.AccessTuple>}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getAccessesList = function() {
  return /** @type{!Array<!proto.ethermint.evm.v1.AccessTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, ethermint_evm_v1_evm_pb.AccessTuple, 9));
};


/**
 * @param {!Array<!proto.ethermint.evm.v1.AccessTuple>} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
*/
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setAccessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ethermint.evm.v1.AccessTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ethermint.evm.v1.AccessTuple}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.addAccesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ethermint.evm.v1.AccessTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.clearAccessesList = function() {
  return this.setAccessesList([]);
};


/**
 * optional bytes v = 10;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes v = 10;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes r = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes r = 11;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes s = 12;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes s = 12;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.DynamicFeeTx} returns this
 */
proto.ethermint.evm.v1.DynamicFeeTx.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.ExtensionOptionsEthereumTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.ExtensionOptionsEthereumTx}
 */
proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.ExtensionOptionsEthereumTx;
  return proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.ExtensionOptionsEthereumTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.ExtensionOptionsEthereumTx}
 */
proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.ExtensionOptionsEthereumTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.ExtensionOptionsEthereumTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.MsgEthereumTxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.MsgEthereumTxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    ethermint_evm_v1_evm_pb.Log.toObject, includeInstance),
    ret: msg.getRet_asB64(),
    vmError: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.MsgEthereumTxResponse}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.MsgEthereumTxResponse;
  return proto.ethermint.evm.v1.MsgEthereumTxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.MsgEthereumTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.MsgEthereumTxResponse}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = new ethermint_evm_v1_evm_pb.Log;
      reader.readMessage(value,ethermint_evm_v1_evm_pb.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRet(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVmError(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.MsgEthereumTxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.MsgEthereumTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      ethermint_evm_v1_evm_pb.Log.serializeBinaryToWriter
    );
  }
  f = message.getRet_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getVmError();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTxResponse} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Log logs = 2;
 * @return {!Array<!proto.ethermint.evm.v1.Log>}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.ethermint.evm.v1.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, ethermint_evm_v1_evm_pb.Log, 2));
};


/**
 * @param {!Array<!proto.ethermint.evm.v1.Log>} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTxResponse} returns this
*/
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ethermint.evm.v1.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ethermint.evm.v1.Log}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ethermint.evm.v1.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ethermint.evm.v1.MsgEthereumTxResponse} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * optional bytes ret = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.getRet = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ret = 3;
 * This is a type-conversion wrapper around `getRet()`
 * @return {string}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.getRet_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRet()));
};


/**
 * optional bytes ret = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRet()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.getRet_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRet()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTxResponse} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.setRet = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string vm_error = 4;
 * @return {string}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.getVmError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTxResponse} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.setVmError = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 gas_used = 5;
 * @return {number}
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.MsgEthereumTxResponse} returns this
 */
proto.ethermint.evm.v1.MsgEthereumTxResponse.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.ethermint.evm.v1);
