// source: ethermint/evm/v1/evm.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.ethermint.evm.v1.AccessTuple', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.ChainConfig', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.Log', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.Params', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.State', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.TraceConfig', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.TransactionLogs', null, global);
goog.exportSymbol('proto.ethermint.evm.v1.TxResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethermint.evm.v1.Params.repeatedFields_, null);
};
goog.inherits(proto.ethermint.evm.v1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.Params.displayName = 'proto.ethermint.evm.v1.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.ChainConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethermint.evm.v1.ChainConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.ChainConfig.displayName = 'proto.ethermint.evm.v1.ChainConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.State = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethermint.evm.v1.State, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.State.displayName = 'proto.ethermint.evm.v1.State';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.TransactionLogs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethermint.evm.v1.TransactionLogs.repeatedFields_, null);
};
goog.inherits(proto.ethermint.evm.v1.TransactionLogs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.TransactionLogs.displayName = 'proto.ethermint.evm.v1.TransactionLogs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethermint.evm.v1.Log.repeatedFields_, null);
};
goog.inherits(proto.ethermint.evm.v1.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.Log.displayName = 'proto.ethermint.evm.v1.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.TxResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethermint.evm.v1.TxResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.TxResult.displayName = 'proto.ethermint.evm.v1.TxResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.AccessTuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethermint.evm.v1.AccessTuple.repeatedFields_, null);
};
goog.inherits(proto.ethermint.evm.v1.AccessTuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.AccessTuple.displayName = 'proto.ethermint.evm.v1.AccessTuple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethermint.evm.v1.TraceConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethermint.evm.v1.TraceConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethermint.evm.v1.TraceConfig.displayName = 'proto.ethermint.evm.v1.TraceConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethermint.evm.v1.Params.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    evmDenom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    enableCreate: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    enableCall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    extraEipsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    chainConfig: (f = msg.getChainConfig()) && proto.ethermint.evm.v1.ChainConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.Params}
 */
proto.ethermint.evm.v1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.Params;
  return proto.ethermint.evm.v1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.Params}
 */
proto.ethermint.evm.v1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvmDenom(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableCreate(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableCall(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addExtraEips(values[i]);
      }
      break;
    case 5:
      var value = new proto.ethermint.evm.v1.ChainConfig;
      reader.readMessage(value,proto.ethermint.evm.v1.ChainConfig.deserializeBinaryFromReader);
      msg.setChainConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvmDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnableCreate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEnableCall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getExtraEipsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
  f = message.getChainConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ethermint.evm.v1.ChainConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string evm_denom = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.Params.prototype.getEvmDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.Params} returns this
 */
proto.ethermint.evm.v1.Params.prototype.setEvmDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool enable_create = 2;
 * @return {boolean}
 */
proto.ethermint.evm.v1.Params.prototype.getEnableCreate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.Params} returns this
 */
proto.ethermint.evm.v1.Params.prototype.setEnableCreate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool enable_call = 3;
 * @return {boolean}
 */
proto.ethermint.evm.v1.Params.prototype.getEnableCall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.Params} returns this
 */
proto.ethermint.evm.v1.Params.prototype.setEnableCall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated int64 extra_eips = 4;
 * @return {!Array<number>}
 */
proto.ethermint.evm.v1.Params.prototype.getExtraEipsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ethermint.evm.v1.Params} returns this
 */
proto.ethermint.evm.v1.Params.prototype.setExtraEipsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ethermint.evm.v1.Params} returns this
 */
proto.ethermint.evm.v1.Params.prototype.addExtraEips = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ethermint.evm.v1.Params} returns this
 */
proto.ethermint.evm.v1.Params.prototype.clearExtraEipsList = function() {
  return this.setExtraEipsList([]);
};


/**
 * optional ChainConfig chain_config = 5;
 * @return {?proto.ethermint.evm.v1.ChainConfig}
 */
proto.ethermint.evm.v1.Params.prototype.getChainConfig = function() {
  return /** @type{?proto.ethermint.evm.v1.ChainConfig} */ (
    jspb.Message.getWrapperField(this, proto.ethermint.evm.v1.ChainConfig, 5));
};


/**
 * @param {?proto.ethermint.evm.v1.ChainConfig|undefined} value
 * @return {!proto.ethermint.evm.v1.Params} returns this
*/
proto.ethermint.evm.v1.Params.prototype.setChainConfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethermint.evm.v1.Params} returns this
 */
proto.ethermint.evm.v1.Params.prototype.clearChainConfig = function() {
  return this.setChainConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethermint.evm.v1.Params.prototype.hasChainConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.ChainConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.ChainConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.ChainConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    homesteadBlock: jspb.Message.getFieldWithDefault(msg, 1, ""),
    daoForkBlock: jspb.Message.getFieldWithDefault(msg, 2, ""),
    daoForkSupport: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    eip150Block: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eip150Hash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eip155Block: jspb.Message.getFieldWithDefault(msg, 6, ""),
    eip158Block: jspb.Message.getFieldWithDefault(msg, 7, ""),
    byzantiumBlock: jspb.Message.getFieldWithDefault(msg, 8, ""),
    constantinopleBlock: jspb.Message.getFieldWithDefault(msg, 9, ""),
    petersburgBlock: jspb.Message.getFieldWithDefault(msg, 10, ""),
    istanbulBlock: jspb.Message.getFieldWithDefault(msg, 11, ""),
    muirGlacierBlock: jspb.Message.getFieldWithDefault(msg, 12, ""),
    berlinBlock: jspb.Message.getFieldWithDefault(msg, 13, ""),
    londonBlock: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.ChainConfig}
 */
proto.ethermint.evm.v1.ChainConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.ChainConfig;
  return proto.ethermint.evm.v1.ChainConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.ChainConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.ChainConfig}
 */
proto.ethermint.evm.v1.ChainConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomesteadBlock(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDaoForkBlock(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDaoForkSupport(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEip150Block(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEip150Hash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEip155Block(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEip158Block(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setByzantiumBlock(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setConstantinopleBlock(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPetersburgBlock(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIstanbulBlock(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMuirGlacierBlock(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setBerlinBlock(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setLondonBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.ChainConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.ChainConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.ChainConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHomesteadBlock();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDaoForkBlock();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDaoForkSupport();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEip150Block();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEip150Hash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEip155Block();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEip158Block();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getByzantiumBlock();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getConstantinopleBlock();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPetersburgBlock();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIstanbulBlock();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getMuirGlacierBlock();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getBerlinBlock();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getLondonBlock();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string homestead_block = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getHomesteadBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setHomesteadBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dao_fork_block = 2;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getDaoForkBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setDaoForkBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool dao_fork_support = 3;
 * @return {boolean}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getDaoForkSupport = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setDaoForkSupport = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string eip150_block = 4;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getEip150Block = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setEip150Block = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string eip150_hash = 5;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getEip150Hash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setEip150Hash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string eip155_block = 6;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getEip155Block = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setEip155Block = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string eip158_block = 7;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getEip158Block = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setEip158Block = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string byzantium_block = 8;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getByzantiumBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setByzantiumBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string constantinople_block = 9;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getConstantinopleBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setConstantinopleBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string petersburg_block = 10;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getPetersburgBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setPetersburgBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string istanbul_block = 11;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getIstanbulBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setIstanbulBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string muir_glacier_block = 12;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getMuirGlacierBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setMuirGlacierBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string berlin_block = 13;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getBerlinBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setBerlinBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string london_block = 17;
 * @return {string}
 */
proto.ethermint.evm.v1.ChainConfig.prototype.getLondonBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.ChainConfig} returns this
 */
proto.ethermint.evm.v1.ChainConfig.prototype.setLondonBlock = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.State.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.State.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.State} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.State.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.State}
 */
proto.ethermint.evm.v1.State.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.State;
  return proto.ethermint.evm.v1.State.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.State} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.State}
 */
proto.ethermint.evm.v1.State.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.State.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.State.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.State} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.State.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.State.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.State} returns this
 */
proto.ethermint.evm.v1.State.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.ethermint.evm.v1.State.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.State} returns this
 */
proto.ethermint.evm.v1.State.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethermint.evm.v1.TransactionLogs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.TransactionLogs.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.TransactionLogs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.TransactionLogs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.TransactionLogs.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.ethermint.evm.v1.Log.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.TransactionLogs}
 */
proto.ethermint.evm.v1.TransactionLogs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.TransactionLogs;
  return proto.ethermint.evm.v1.TransactionLogs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.TransactionLogs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.TransactionLogs}
 */
proto.ethermint.evm.v1.TransactionLogs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.ethermint.evm.v1.Log;
      reader.readMessage(value,proto.ethermint.evm.v1.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.TransactionLogs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.TransactionLogs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.TransactionLogs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.TransactionLogs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ethermint.evm.v1.Log.serializeBinaryToWriter
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.TransactionLogs.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.TransactionLogs} returns this
 */
proto.ethermint.evm.v1.TransactionLogs.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Log logs = 2;
 * @return {!Array<!proto.ethermint.evm.v1.Log>}
 */
proto.ethermint.evm.v1.TransactionLogs.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.ethermint.evm.v1.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ethermint.evm.v1.Log, 2));
};


/**
 * @param {!Array<!proto.ethermint.evm.v1.Log>} value
 * @return {!proto.ethermint.evm.v1.TransactionLogs} returns this
*/
proto.ethermint.evm.v1.TransactionLogs.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ethermint.evm.v1.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ethermint.evm.v1.Log}
 */
proto.ethermint.evm.v1.TransactionLogs.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ethermint.evm.v1.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ethermint.evm.v1.TransactionLogs} returns this
 */
proto.ethermint.evm.v1.TransactionLogs.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethermint.evm.v1.Log.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topicsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    data: msg.getData_asB64(),
    blockNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    txHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    txIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    blockHash: jspb.Message.getFieldWithDefault(msg, 7, ""),
    index: jspb.Message.getFieldWithDefault(msg, 8, 0),
    removed: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.Log}
 */
proto.ethermint.evm.v1.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.Log;
  return proto.ethermint.evm.v1.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.Log}
 */
proto.ethermint.evm.v1.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopics(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxIndex(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getRemoved();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.Log.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string topics = 2;
 * @return {!Array<string>}
 */
proto.ethermint.evm.v1.Log.prototype.getTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setTopicsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.addTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.clearTopicsList = function() {
  return this.setTopicsList([]);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.Log.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ethermint.evm.v1.Log.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.Log.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 block_number = 4;
 * @return {number}
 */
proto.ethermint.evm.v1.Log.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string tx_hash = 5;
 * @return {string}
 */
proto.ethermint.evm.v1.Log.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 tx_index = 6;
 * @return {number}
 */
proto.ethermint.evm.v1.Log.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setTxIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string block_hash = 7;
 * @return {string}
 */
proto.ethermint.evm.v1.Log.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 index = 8;
 * @return {number}
 */
proto.ethermint.evm.v1.Log.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool removed = 9;
 * @return {boolean}
 */
proto.ethermint.evm.v1.Log.prototype.getRemoved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.Log} returns this
 */
proto.ethermint.evm.v1.Log.prototype.setRemoved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.TxResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.TxResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.TxResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.TxResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bloom: msg.getBloom_asB64(),
    txLogs: (f = msg.getTxLogs()) && proto.ethermint.evm.v1.TransactionLogs.toObject(includeInstance, f),
    ret: msg.getRet_asB64(),
    reverted: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.TxResult}
 */
proto.ethermint.evm.v1.TxResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.TxResult;
  return proto.ethermint.evm.v1.TxResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.TxResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.TxResult}
 */
proto.ethermint.evm.v1.TxResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBloom(value);
      break;
    case 3:
      var value = new proto.ethermint.evm.v1.TransactionLogs;
      reader.readMessage(value,proto.ethermint.evm.v1.TransactionLogs.deserializeBinaryFromReader);
      msg.setTxLogs(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRet(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.TxResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.TxResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.TxResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.TxResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTxLogs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ethermint.evm.v1.TransactionLogs.serializeBinaryToWriter
    );
  }
  f = message.getRet_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getReverted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string contract_address = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.TxResult.prototype.getContractAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.TxResult} returns this
 */
proto.ethermint.evm.v1.TxResult.prototype.setContractAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes bloom = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.TxResult.prototype.getBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bloom = 2;
 * This is a type-conversion wrapper around `getBloom()`
 * @return {string}
 */
proto.ethermint.evm.v1.TxResult.prototype.getBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBloom()));
};


/**
 * optional bytes bloom = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBloom()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.TxResult.prototype.getBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBloom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.TxResult} returns this
 */
proto.ethermint.evm.v1.TxResult.prototype.setBloom = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional TransactionLogs tx_logs = 3;
 * @return {?proto.ethermint.evm.v1.TransactionLogs}
 */
proto.ethermint.evm.v1.TxResult.prototype.getTxLogs = function() {
  return /** @type{?proto.ethermint.evm.v1.TransactionLogs} */ (
    jspb.Message.getWrapperField(this, proto.ethermint.evm.v1.TransactionLogs, 3));
};


/**
 * @param {?proto.ethermint.evm.v1.TransactionLogs|undefined} value
 * @return {!proto.ethermint.evm.v1.TxResult} returns this
*/
proto.ethermint.evm.v1.TxResult.prototype.setTxLogs = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethermint.evm.v1.TxResult} returns this
 */
proto.ethermint.evm.v1.TxResult.prototype.clearTxLogs = function() {
  return this.setTxLogs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethermint.evm.v1.TxResult.prototype.hasTxLogs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes ret = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ethermint.evm.v1.TxResult.prototype.getRet = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ret = 4;
 * This is a type-conversion wrapper around `getRet()`
 * @return {string}
 */
proto.ethermint.evm.v1.TxResult.prototype.getRet_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRet()));
};


/**
 * optional bytes ret = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRet()`
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.TxResult.prototype.getRet_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRet()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ethermint.evm.v1.TxResult} returns this
 */
proto.ethermint.evm.v1.TxResult.prototype.setRet = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool reverted = 5;
 * @return {boolean}
 */
proto.ethermint.evm.v1.TxResult.prototype.getReverted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.TxResult} returns this
 */
proto.ethermint.evm.v1.TxResult.prototype.setReverted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint64 gas_used = 6;
 * @return {number}
 */
proto.ethermint.evm.v1.TxResult.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.TxResult} returns this
 */
proto.ethermint.evm.v1.TxResult.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethermint.evm.v1.AccessTuple.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.AccessTuple.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.AccessTuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.AccessTuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.AccessTuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storageKeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.AccessTuple}
 */
proto.ethermint.evm.v1.AccessTuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.AccessTuple;
  return proto.ethermint.evm.v1.AccessTuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.AccessTuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.AccessTuple}
 */
proto.ethermint.evm.v1.AccessTuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStorageKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.AccessTuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.AccessTuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.AccessTuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.AccessTuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStorageKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.AccessTuple.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.AccessTuple} returns this
 */
proto.ethermint.evm.v1.AccessTuple.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string storage_keys = 2;
 * @return {!Array<string>}
 */
proto.ethermint.evm.v1.AccessTuple.prototype.getStorageKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ethermint.evm.v1.AccessTuple} returns this
 */
proto.ethermint.evm.v1.AccessTuple.prototype.setStorageKeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ethermint.evm.v1.AccessTuple} returns this
 */
proto.ethermint.evm.v1.AccessTuple.prototype.addStorageKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ethermint.evm.v1.AccessTuple} returns this
 */
proto.ethermint.evm.v1.AccessTuple.prototype.clearStorageKeysList = function() {
  return this.setStorageKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ethermint.evm.v1.TraceConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethermint.evm.v1.TraceConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.TraceConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    tracer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timeout: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reexec: jspb.Message.getFieldWithDefault(msg, 3, 0),
    disableStack: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    disableStorage: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    debug: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    limit: jspb.Message.getFieldWithDefault(msg, 9, 0),
    overrides: (f = msg.getOverrides()) && proto.ethermint.evm.v1.ChainConfig.toObject(includeInstance, f),
    enableMemory: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    enableReturnData: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethermint.evm.v1.TraceConfig}
 */
proto.ethermint.evm.v1.TraceConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethermint.evm.v1.TraceConfig;
  return proto.ethermint.evm.v1.TraceConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethermint.evm.v1.TraceConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethermint.evm.v1.TraceConfig}
 */
proto.ethermint.evm.v1.TraceConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTracer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReexec(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableStack(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableStorage(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 10:
      var value = new proto.ethermint.evm.v1.ChainConfig;
      reader.readMessage(value,proto.ethermint.evm.v1.ChainConfig.deserializeBinaryFromReader);
      msg.setOverrides(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableMemory(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableReturnData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethermint.evm.v1.TraceConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethermint.evm.v1.TraceConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethermint.evm.v1.TraceConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTracer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimeout();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReexec();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDisableStack();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDisableStorage();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getOverrides();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ethermint.evm.v1.ChainConfig.serializeBinaryToWriter
    );
  }
  f = message.getEnableMemory();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getEnableReturnData();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string tracer = 1;
 * @return {string}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getTracer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setTracer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timeout = 2;
 * @return {string}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getTimeout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 reexec = 3;
 * @return {number}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getReexec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setReexec = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool disable_stack = 5;
 * @return {boolean}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getDisableStack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setDisableStack = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool disable_storage = 6;
 * @return {boolean}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getDisableStorage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setDisableStorage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool debug = 8;
 * @return {boolean}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setDebug = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 limit = 9;
 * @return {number}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional ChainConfig overrides = 10;
 * @return {?proto.ethermint.evm.v1.ChainConfig}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getOverrides = function() {
  return /** @type{?proto.ethermint.evm.v1.ChainConfig} */ (
    jspb.Message.getWrapperField(this, proto.ethermint.evm.v1.ChainConfig, 10));
};


/**
 * @param {?proto.ethermint.evm.v1.ChainConfig|undefined} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
*/
proto.ethermint.evm.v1.TraceConfig.prototype.setOverrides = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.clearOverrides = function() {
  return this.setOverrides(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.hasOverrides = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool enable_memory = 11;
 * @return {boolean}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getEnableMemory = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setEnableMemory = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool enable_return_data = 12;
 * @return {boolean}
 */
proto.ethermint.evm.v1.TraceConfig.prototype.getEnableReturnData = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ethermint.evm.v1.TraceConfig} returns this
 */
proto.ethermint.evm.v1.TraceConfig.prototype.setEnableReturnData = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


goog.object.extend(exports, proto.ethermint.evm.v1);
